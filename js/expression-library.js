const mgGroupSpec = (n,r) => arrayOfIndexes(n-1)
        .filter( i => !Number.isInteger( n / (i+1)) )
        .filter( i => gcd( n, (i+1) ) == 1 )
        .map( i => `${i+1}@${n}` + (r ? ` * ${ r }` : ''));
const expressionLibrary = {
    'blank': [],
    'default': [
//        '4@7',
//        '4@7~5',
//        '4@19',
//        '2~(4@19)',
//        '',
//        'e = (5:4:2 [2,1,0])',
//        '5:4:2 [2,0,1][1,2,0]',
//        '(4@7~5)*(2~(4@19))',
        '4@39',
        '10:4',
        '4:10'
    ],
    'literals': [
        'a = (2:3); b = (5:7);',
        'c = (a~b)',
        'c/b',
        'd = (b~a)',
        'd/a',
//        'e',
//        'e',
//
//        'k = ([(1,31) 0..31] / mb); e; e; e;',
//        'e; e; e; e;',
//
//        'k; e; e; e;',
//        'e; e; e; e;',
//        'e; e; e; e;',
//
//        'k; e; e; e;',
//        'e; e; e; e;',
    ],
    'decomposition': [
        '&vars a = 5, b = 4, c = 2',
        '4:5.2',
        '(b:c~a) * (c~b:a) # == b:a.c',
        '5.2:4',
        '(c~a:b) * (c:b~a) # == a.c:b',
        '2:5.4',
        '(c:a~b) * (a~c:b) # == c:a.b',
        '5.4:2',
        '(a~b:c) * (a:c~b) # == a.b:c',
        '4.2:5',
        '(c~b:a) * (c:a~b) # == b.c:a',
        '5:4.2',
        '(a:c~b) * (c~a:b) # == a:b.c',
    ],
    'a:b:c': [
        '&vars a = 5, b = 4, c = 2',
        'a0 = (b:c~a)',
        //'a0h = (a~b:c)',
        //'a0i = (c:b~a)',
        'a0hi = (a~c:b)',

        'b0 = (c:a~b)',
        'b0hi = (b~a:c)',

        'c0 = (a:b~c)',
        'c0hi = (c~b:a)',

        'a1 = (a0 * c0hi)',
        'b1 = (c0 * b0hi)',
        'c1 = (b0 * a0hi)',

        'z1 = (b1 * a0)',
        'z2 = (c1 * c0)',
        'z3 = (a1 * b0)',
    ],
    '2:2 (mg 3)': [
        '1 @ 3',
        '2 @ 3',
    ],
    '5 (mg 4)': [
        '1 @ 4',
        '3 @ 4',
    ],
    '3:2 (mg 5)': [
        'e = 3:2 {1}',
        '1 @ 5',
        '2 @ 5',
        '3 @ 5',
        '4 @ 5',
    ],
    '7 (mg 6)': [
        '1 @ 6',
        '5 @ 6',
    ],
    '2:2:2 (mg 7)': mgGroupSpec(7),
    '3:3 (mg 8)': [
        'e = 3:3 {1}',
        ...mgGroupSpec(8, 'e')
    ],
    '5:2 (mg 9)': [
        'e = 5:2 {1}',
        '1 @ 9 * e',
        '2 @ 9 * e',
        '4 @ 9 * e',
        '5 @ 9 * e',
        '7 @ 9 * e',
        '8 @ 9 * e',
    ],
    '11 (mg 10)': mgGroupSpec(10),
    '4:3 (mg 11)': [
        'e = 4:3 {1}',
        '1 @ 11 * e',
        '2 @ 11 * e',
        '3 @ 11 * e',
        '4 @ 11 * e',
        '5 @ 11 * e',
        '6 @ 11 * e',
        '7 @ 11 * e',
        '8 @ 11 * e',
        '9 @ 11 * e',
        '10 @ 11 * e',
    ],
    '13 (mg 12)': mgGroupSpec(12),
    '14 (mg 13)': mgGroupSpec(13),
    '15 (mg 14)': mgGroupSpec(14),
    '16 (mg 15)': mgGroupSpec(15),
    '17 (mg 16)': mgGroupSpec(16),
    '18 (mg 17)': mgGroupSpec(17),
    '19 (mg 18)': mgGroupSpec(18),
    '20 (mg 19)': mgGroupSpec(19),
    '21 (mg 20)': mgGroupSpec(20),
    '22 (mg 21)': mgGroupSpec(21),
    '5:4:2 (mg 39) ': [
        'e = 5:4:2 {1,0}',
        '1 @ 39 * e',
        '2 @ 39 * e',
        '4 @ 39 * e',
        '5 @ 39 * e',
        '7 @ 39 * e',
        '8 @ 39 * e',
        '10 @ 39 * e',
        '11 @ 39 * e',
        '14 @ 39 * e',
        '16 @ 39 * e',
        '17 @ 39 * e',
        '19 @ 39 * e',
        '20 @ 39 * e',
        '22 @ 39 * e',
        '23 @ 39 * e',
        '25 @ 39 * e',
        '28 @ 39 * e',
        '29 @ 39 * e',
        '31 @ 39 * e',
        '32 @ 39 * e',
        '34 @ 39 * e',
        '35 @ 39 * e',
        '37 @ 39 * e',
        '38 @ 39 * e',
    ],
    'unit-boxes': [
        '2:2',
        '3:2',
        '4:2',
        '3:3',
        '4:3',
        '7:2',
        '5:3',
        '4:4',
        '6:3',
        '5:4',
        '7:3',
        '11:2',
        '6:4',
        '5:5',
        '13:2',
        '9:3',
        '14:2',
        '10:4',
        '4:10',
    ],

    'products': [
        '(2:4)',
        '(2:4)~5',
        '(4:2)~5',
        '5~(4:2)',
        '5~(2:4)',
        '5:2:2:2',
        '(5:2)~(2:2)',
        '5~(2:2)~2',
    ],

    'powers': [
        '(10:4)^-1',
        '(10:4)^0',
        '(10:4)^1',
        '(10:4)^2',
        '(10:4)^3',
        '(10:4)^4',
        '(10:4)^5',
        '(10:4)^6',
    ],

    '5x3x2': [
//        '5:3~2; 2:5~3; 3:2~5',
//        '2~5:3; 3~2:5; 5~3:2',
        '5:8; 3:10; 2:20',
        '5:3:2; 2:5:3; 3:2:5',
        '(3~5:2) * (3:2~5) * (2~5:3)',
    ],

    '5x4x2': [

        '5:4:2 [2,0,1] [0,1,2]; 5:4:2 {0,1} {0,0}',
        '5:4:2 [2,0,1] [2,0,1]; 5:4:2 {0,1} {0,1}',
        '5:4:2 [2,0,1] [1,2,0]; 5:4:2 {0,1} {0,2}',
        '5:4:2 [2,0,1] [2,1,0]; 5:4:2 {0,1} {1,0}',
        '5:4:2 [2,0,1] [1,0,2]; 5:4:2 {0,1} {1,1}',
        '5:4:2 [2,0,1] [0,2,1]; 5:4:2 {0,1} {1,2}',
//
//        '# 4:2:5',
//        '# perm references factorial point references',
//        '4:2:5 [0,1,2]; 4:2:5 {0,0}',
//        '4:2:5 [2,0,1]; 4:2:5 {0,1}',
//        '4:2:5 [1,2,0]; 4:2:5 {0,2}',
//        '4:2:5 [1,0,2]; 4:2:5 {1,0}',
//        '4:2:5 [2,1,0]; 4:2:5 {1,1}',
//        '4:2:5 [0,2,1]; 4:2:5 {1,2}',
    ],

    '7x5x3': [
        'a = (3:5~7); b = (7:3~5); c = (5:7~3)',
        'd = (a * a^1)',
        'e = 15:7; f = 21:5; g = 3:35'
    ],


};